-                                    return function(r) {
-                                        t.resources[e].loaded || (t.resources[e].loaded = !0, console.debug(r), n())
-                                    }("link onload callback")
+                                    t.resources[e].loaded || (t.resources[e].loaded = !0, n())

-                        } catch (r) {
-                            console.error(r)
-                        }
+                        } catch (r) {}

-                    return console.error(t), ""
+                    return ""

-                        } catch (t) {
-                            console.debug(t)
-                        }
+                        } catch (t) {}

-                        this.sendXHRRequest(e).then((function(e) {
-                            console.debug("xhr beacon is fired successsfully.", e)
-                        })).catch((function(e) {
-                            console.error("xhr beacon request failed.", e)
-                        }))
+                        this.sendXHRRequest(e)

-                        } catch (r) {
-                            console.error("Error while executing cmd function", r)
-                        }
+                        } catch (r) {}

-                        } catch (t) {
-                            console.error("Error while executing cmd function", t)
-                        }
+                        } catch (t) {}

-                        this.state !== e && (console.debug("PageLifeCycleManager >> ", e), this.state = e, this.dispatch(this.state))
+                        this.state !== e && (this.state = e, this.dispatch(this.state))

-                        } catch (t) {
-                            console.debug(t)
-                        }
+                        } catch (t) {}

-                        !this.isImpressed1px && this.intersectionRatio > 0 && (console.debug("Visibility Checker >> Impressed 1px"), this.isImpressed1px = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_1PX, {
+                        !this.isImpressed1px && this.intersectionRatio > 0 && (this.isImpressed1px = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_1PX, {

-                        this.isImpressed100p || 1 !== this.intersectionRatio || (console.debug("Visibility Checker >> impressed 100p"), this.isImpressed100p = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_100P, {
+                        this.isImpressed100p || 1 !== this.intersectionRatio || (this.isImpressed100p = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_100P, {

-                            console.debug("Visibility Checker >> impressed 100p 1s"), e.isImpressed100p1s = !0, e.visibilityObserverListener.dispatch(boe.IMPRESSED_100P_WITH_DURATION_1S, {
+                            e.isImpressed100p1s = !0, e.visibilityObserverListener.dispatch(boe.IMPRESSED_100P_WITH_DURATION_1S, {

-                        }), 1e3)) : this.visibleTimeout100p1s && (console.debug("Visibility Checker >> clear impressed 100p 1s timer"), clearTimeout(this.visibleTimeout100p1s), this.visibleTimeout100p1s = void 0))
+                        }), 1e3)) : this.visibleTimeout100p1s && (clearTimeout(this.visibleTimeout100p1s), this.visibleTimeout100p1s = void 0))

-                            console.debug("Visibility Checker >> impressed 50p 2s"), e.isImpressed50p2s = !0, e.visibilityObserverListener.dispatch(boe.IMPRESSED_50P_WITH_DURATION_2S, {
+                            e.isImpressed50p2s = !0, e.visibilityObserverListener.dispatch(boe.IMPRESSED_50P_WITH_DURATION_2S, {

-                        }), 2e3) : this.visibleTimeout50p2s && (console.debug("Visibility Checker >> clear impressed 50p 2s timer"), clearTimeout(this.visibleTimeout50p2s), this.visibleTimeout50p2s = void 0))
+                        }), 2e3) : this.visibleTimeout50p2s && (clearTimeout(this.visibleTimeout50p2s), this.visibleTimeout50p2s = void 0))

-                            console.debug("Visibility Checker >> impressed", e.viewableImpressionConfig), e.isViewableImpressed = !0, e.visibilityObserverListener.dispatch(boe.VIEWABLE_IMPRESSED, {
+                            e.isViewableImpressed = !0, e.visibilityObserverListener.dispatch(boe.VIEWABLE_IMPRESSED, {

-                        }), this.viewableImpressionConfig.ms)) : this.visibleTimeout && (console.debug("Visibility Checker >> clear viewable impressed timer", this.viewableImpressionConfig), clearTimeout(this.visibleTimeout), this.visibleTimeout = void 0))
+                        }), this.viewableImpressionConfig.ms)) : this.visibleTimeout && (clearTimeout(this.visibleTimeout), this.visibleTimeout = void 0))

-                        !this.isImpressed1px && this.intersectionRatio > 0 && "active" === this.pageLifeCycleState && (console.debug("Focus Visibility Checker >> impressed 0p"), this.isImpressed1px = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_1PX, {
+                        !this.isImpressed1px && this.intersectionRatio > 0 && "active" === this.pageLifeCycleState && (this.isImpressed1px = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_1PX, {

-                        this.isImpressed100p || 1 !== this.intersectionRatio || "active" !== this.pageLifeCycleState || (console.debug("Focus Visibility Checker >> impressed 100p"), this.isImpressed100p = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_100P, {
+                        this.isImpressed100p || 1 !== this.intersectionRatio || "active" !== this.pageLifeCycleState || (this.isImpressed100p = !0, this.visibilityObserverListener.dispatch(boe.IMPRESSED_100P, {

-                            console.debug("Focus Visibility Checker >> impressed 100p 1s"), e.isImpressed100p1s = !0, e.visibilityObserverListener.dispatch(boe.IMPRESSED_100P_WITH_DURATION_1S, {
+                            e.isImpressed100p1s = !0, e.visibilityObserverListener.dispatch(boe.IMPRESSED_100P_WITH_DURATION_1S, {

-                        }), 1e3)) : this.visibleTimeout100p1s && (console.debug("Focus Visibility Checker >> clear impressed 100p 1s timer"), clearTimeout(this.visibleTimeout100p1s), this.visibleTimeout100p1s = void 0))
+                        }), 1e3)) : this.visibleTimeout100p1s && (clearTimeout(this.visibleTimeout100p1s), this.visibleTimeout100p1s = void 0))

-                            console.debug("Focus Visibility Checker >> impressed", e.viewableImpressionConfig), e.isViewableImpressed = !0, e.visibilityObserverListener.dispatch(boe.VIEWABLE_IMPRESSED, {
+                            e.isViewableImpressed = !0, e.visibilityObserverListener.dispatch(boe.VIEWABLE_IMPRESSED, {

-                        }), this.viewableImpressionConfig.ms)) : this.visibleTimeout && (console.debug("Focus Visibility Checker >> clear viewable impressed timer", this.viewableImpressionConfig), clearTimeout(this.visibleTimeout), this.visibleTimeout = void 0))
+                        }), this.viewableImpressionConfig.ms)) : this.visibleTimeout && (clearTimeout(this.visibleTimeout), this.visibleTimeout = void 0))

-                        this.observer ? console.debug("Visibility observer already started") : (this.observer = new IntersectionObserver((function(t) {
+                        this.observer || (this.observer = new IntersectionObserver((function(t) {

-                version: "3.0.5",
+                version: "3.0.6-alpha.0",

-                var n = "https://ssl.pstatic.net/tveta/libs/instream/prod/3.0.5",
+                var n = "https://ssl.pstatic.net/tveta/libs/instream/prod/3.0.6-alpha.0",

-                                    return console.error("Agent Detector >> getBrowserVersion error", e), -1
+                                    return -1

-                                    return console.error("Agent Detector >> getOSVersion error", e), -1
+                                    return -1

-                                        e.prev = 9, e.t0 = e.catch(3), console.error("Error while executing cmd function", e.t0);
-                                    case 12:
-                                        return e.prev = 12, this.isWorking = !1, e.finish(12);
-                                    case 15:
+                                        e.prev = 9, e.t0 = e.catch(3);
+                                    case 11:
+                                        return e.prev = 11, this.isWorking = !1, e.finish(11);
+                                    case 14:

-                                        throw t.prev = 10, t.t0 = t.catch(2), console.error(t.t0), new Error("Vast-Parse >> Cannot Resolve Wrapper");
-                                    case 14:
+                                        throw t.prev = 10, t.t0 = t.catch(2), new Error("Vast-Parse >> Cannot Resolve Wrapper");
+                                    case 13:

-f464abb3 2e5a576d 47bcbdf5



+acbacf5b 764d540a e6acfc5d

